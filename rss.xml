<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>drets</title>
        <link>https://drets.life</link>
        <description><![CDATA[For λ calculus]]></description>
        <atom:link href="https://drets.life/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 23 May 2017 11:00:00 UT</lastBuildDate>
        <item>
    <title>Conditionals</title>
    <link>https://drets.life/posts/conditionals.html</link>
    <description><![CDATA[<p><span style="font-variant: small-caps;">1min 43sec read</span></p>
<p>I decided to write about conditional sentences. It should help <em>me</em> to memorize how to properly build the conditional sentences. Conditional sentence is built from “if” (condition) and “main” (result) clauses. There are <strong>three</strong> main types of conditional sentences.</p>
<div>

</div>
<!--more-->
<h2 id="zero-conditional">Zero Conditional</h2>
<p>Zero Conditional is used when we talk about general facts. Both parts of the conditional clause use “Present Simple” time.</p>
<div class="note">
<p>If you finish the university, you become smarter.<br />
If you study math, your logic skills become better.<br />
You get a present if you write to Santa.</p>
</div>
<h2 id="one-conditional">One Conditional</h2>
<ol type="a">
<li>The first type of First Conditional is used when we talk about possible events that may possibly happen. “if” clause uses “Present Simple” time, and “main” clause uses “Future Indefinite” time.</li>
</ol>
<div class="note">
<p>If I have enough time, I will study math.<br />
If I have a working visa, I will start to work in Germany.<br />
I will walk around the lake if I write a post in my blog.</p>
</div>
<p>    b. The second type of First Conditional is used when we talk about events that unlikely happen. “if” clause uses “should + infinitive” and “main” clause uses “Future Indefinite” time.</p>
<div class="note">
<p>If I should have enough time, I will study category theory.<br />
If I shouldn’t have a working visa, I will finish the “How to prove it” book till July.<br />
I will start to work on “Verified Functional Programming in Agda” if I should finish the “How to prove it” book.</p>
</div>
<h2 id="two-conditional">Two Conditional</h2>
<p>Second Conditional is used when we talk about an unreal event in the present time. “if” clause uses “Past Simple” time and “main” clause uses “would + infinitive”.</p>
<div class="note">
<p>If I had enough time, I would study Japanese.<br />
If I could surf, I would fly to Australia.<br />
I would become rich if I won a lottery.</p>
</div>
<h2 id="three-conditional">Three Conditional</h2>
<p>Third Conditional is used when we talk about an <em>absolutely</em> unreal event in the past. “if” clause uses “Past Perfect Subjunctive” and “main” clause uses “would + Perfect infinitive”.</p>
<div class="note">
<p>If I had had enough time, I would have studied math last year.<br />
If I had written a post in my blog, I would have walked around the lake yesterday.<br />
I would have bought the island in the Pacific Ocean last year if I had won the national lottery.</p>
</div>
<h2 id="mixed-conditionals">Mixed Conditionals</h2>
<ol type="a">
<li>“if” clause is in the past and “main” clause is in the present or future.</li>
</ol>
<div class="note">
<p>If you had run a marathon last year, you would feel better now.<br />
If I had written a post in my blog, I would walk around the lake now.<br />
I would be rich now if I had won a lottery yesterday.</p>
</div>
<p>    b. “if” clause doesn’t have a specific time and “main” clause is in the past.</p>
<div class="note">
<p>If she wasn’t so smart, she would not have passed her exam.<br />
If I wasn’t so brave, I wouldn’t have jumped with a parachute.<br />
She would have passed her exam if she wasn’t so stupid.</p>
</div>

<div id="comment-nav">
  <div>
    <a id="gh-comments-button" class="btn" href="https://github.com/drets/drets.github.io/issues/3.0">Comment on GitHub</a>

    
  </div>
  <div>
    
    
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Tue, 23 May 2017 11:00:00 UT</pubDate>
    <guid>https://drets.life/posts/conditionals.html</guid>
    <dc:creator>Dmytro Rets</dc:creator>
</item>
<item>
    <title>Weekly Review 19</title>
    <link>https://drets.life/posts/weekly-review-2017-19.html</link>
    <description><![CDATA[<p><span style="font-variant: small-caps;">50sec read</span></p>
<p>Trip to Warsaw. Started to work on chapter four.</p>
<div>

</div>
<!--more-->
<h2 id="last-week">Last week</h2>
<p>I finished chapter three. The solutions of the exercises can be found here: <a href="https://github.com/drets/how-to-prove-it/blob/master/htp_3.pdf">htp_3.pdf</a>. I am on the second section of the “Relations” chapter.</p>
<p>After finishing the “How to prove it” book I want to work on the “<a href="http://a.co/iJSr8IR">Verified Functional Programming in Agda</a>” book. Some knowledge of Agda may help me to become a better programmer.</p>
<p>My family had to travel to Warsaw for a few days. Here is one shot from there:</p>
<p><img src="../images/posts/weekly-review-2017-19/warsaw.jpg" width="300" /></p>
<p>I tempted to think it’s the main reason why I walked only 27 kilometers. Even if I walked only 27 kilometers it was enough time to finish listening to my second audiobook − “A Wild Sheep Chase”. I started to listen to another book that called “Hard to Be a God” by Arkady and Boris Strugatsky. It’s really cool that I do sports activity in conjunction with listening fiction books.</p>
<p>I listen to the really nice talk from “The Haskell Cast” series: <a href="http://www.haskellcast.com/episode/013-john-wiegley-on-categories-and-compilers">Episode 13 - John Wiegley on Categories and Compilers</a>.</p>
<p>I played with “<a href="https://monad.cat/posts/2016-05-10-barbed-wire.html">Programming with bananas and barbed wire. Part 1</a>” tutorial; pretty cool introduction to recursion schemes.</p>
<h2 id="this-week">This week</h2>
<p>I am going to walk 42 kilometers.</p>
<p>I am going to finish sections two <em>and</em> three of the “Relations” chapter.</p>

<div id="comment-nav">
  <div>
    <a id="gh-comments-button" class="btn" href="https://github.com/drets/drets.github.io/issues/2.0">Comment on GitHub</a>

    
  </div>
  <div>
    
    
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Mon, 15 May 2017 11:00:00 UT</pubDate>
    <guid>https://drets.life/posts/weekly-review-2017-19.html</guid>
    <dc:creator>Dmytro Rets</dc:creator>
</item>
<item>
    <title>Weekly Review 18</title>
    <link>https://drets.life/posts/weekly-review-2017-18.html</link>
    <description><![CDATA[<p><span style="font-variant: small-caps;">2min 24sec read</span></p>
<p>Chapter three is HUGE, goal analysis and more.</p>
<div>

</div>
<!--more-->
<h2 id="weekly-goals-analysis">Weekly goals analysis</h2>
<p>I want to start from the goals for the week. I have set them in the previous week.</p>
<blockquote>
<ol type="1">
<li>Solve all exercises from the chapter three of “How to prove it” book.</li>
</ol>
</blockquote>
<p>I was pretty sure that I will finish the biggest chapter on this week (biggest chapter so far). The amount of the exercises to solve in this week was much fewer than in the previous week. However, now I know that the amount of something shouldn’t be the main factor of estimation. Since exercises may have a different level of difficulty, and that’s the case for this week.</p>
<p>Last three exercises of chapter three remain to solve for the near future. In general, I satisfied with the results of the goal.</p>
<blockquote>
<ol start="2" type="1">
<li>I should walk on 40 kilometers.</li>
</ol>
</blockquote>
<p>Every person with an aim to be successful should devote part of the life to the sport. Walking on 40 kilometers per week is hard to call a sport, as maximum, a physical activity. However, I really like walking and, I think, this is my first step towards running for long distance and, potentially, towards the marathon run (my long term goal).</p>
<p>I walked around 30 kilometers. I listened more than half of “Охота на овец” audiobook during walking. I found the place in my life for the fiction books!</p>
<p>As a retrospective, I need to track the number of kilometers more precisely and walk <em>at least</em> 40 kilometers per week (don’t skip rainy days, no excuses!).</p>
<blockquote>
<ol start="3" type="1">
<li>I should practice English and book the lesson.</li>
</ol>
</blockquote>
<p>English is the main language in the world in this century. English is the really important thing in Software Engineer career, I should try to improve the language skills as much as possible.</p>
<p>I didn’t book the lesson in the week (shame on me!), but I am going to do it in the near future, really!</p>
<p>One positive thing, I hope this blog should improve my writing skills in the long run.</p>
<p>I have the idea to implement typos, errors reporter tool for my blog. Initially, the idea is not mine, of course, but the existed free tools don’t satisfy my needs. Briefly, the idea: a user selects specific text with the typo or error, clicks “Bug” button, optionally writes a comment, and I receive the email with an information that somebody found an error on my page. Error reporting should be UX friendly and very simple, <em>simpler</em> than using regular comments otherwise, this whole idea becomes useless. I even feel that I am capable of implementing it without any troublesome. Only one thing which stops me from implementing it is the time and priorities. My main priority on the technical side is “How to prove it” book for now.</p>
<p>That’s pretty much all about the weekly goals analysis. I satisfied with my performance in general. But, of course, there is a room for improvements.</p>
<h2 id="everything-and-nothing">Everything and nothing</h2>
<p><em>Music</em>:<br />
It looks like my music search is over at least up to next month. I mostly listen to a smooth jazz, such bands as Acoustic Alchemy, The Rippingtons, Fourplay, 3rd Force. I also like The Down To The Bone, Tangerine Dream, The Rolling Stones, John Coltrane, Mozart.</p>
<p><em>Youtube</em>:<br />
I watched a nice video from Bartosz Milewski about arrows. I recommend it to everyone interested in Haskell and Category Theory.</p>
<p><em>Math</em>:<br />
<a href="https://en.wikipedia.org/wiki/Drinker_paradox" class="uri">https://en.wikipedia.org/wiki/Drinker_paradox</a></p>
<p><em>Eng</em>:<br />
I found a nice resource for practicing the English grammar: <a href="https://www.englishgrammar101.com" class="uri">https://www.englishgrammar101.com</a>.<br />
I want to work on it in the near future.</p>
<h2 id="next-week-goals">Next week goals:</h2>
<ol type="1">
<li>Finish three last exercises of chapter three and start to work on chapter four (the chapter about math relation).</li>
<li>Book a lesson with a professional English teacher.</li>
<li>Walk on 40 kilometers.</li>
</ol>
<p>The goals are pretty much the same as for the previous week. Good luck!</p>

<div id="comment-nav">
  <div>
    <a id="gh-comments-button" class="btn" href="https://github.com/drets/drets.github.io/issues/2.0">Comment on GitHub</a>

    
  </div>
  <div>
    
    
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Tue, 09 May 2017 11:00:00 UT</pubDate>
    <guid>https://drets.life/posts/weekly-review-2017-18.html</guid>
    <dc:creator>Dmytro Rets</dc:creator>
</item>
<item>
    <title>Weekly Review 17</title>
    <link>https://drets.life/posts/weekly-review-2017-17.html</link>
    <description><![CDATA[<p><span style="font-variant: small-caps;">1min 6sec read</span></p>
<p>My fifth weekly review is here. I am continuing to work on the third chapter of “How to prove it” book. I started to do a long distance walk.</p>
<div>

</div>
<!--more-->
<h2 id="done-on-this-week">Done on this week</h2>
<ul>
<li><p>“How to prove it“<br />
I didn’t manage to finish the exercises in chapter three. However, I am not sad. Guess, why? Because I learned how to make the proofs, which is the main purpose of this chapter and the whole book, I think.<br />
I am at the end of the fifth section of the chapter. The chapter has seven sections. Sections six and seven have fewer exercises then three and four, so I feel that I’ll finish the chapter on this week. Fingers crossed.</p></li>
<li><p>I found a new interesting activity, which is also useful. I do a long distance walking (well, if seven km is a long distance) and listen to an audiobook. So, on this week I walked around 40 km and finished to listen “<a href="https://ru.wikipedia.org/wiki/О_чём_я_говорю,_когда_говорю_о_беге">О чём я говорю, когда говорю о беге</a>”. Pretty nice book. After listening to the book, I felt the desire to run a marathon distance, I wish to do it at some point in the future.<br />
Next book for my walking activity is written by the same author: “<a href="https://ru.wikipedia.org/wiki/Охота_на_овец">Охота на овец</a>”.</p></li>
<li><p>The interesting talk about the extended functor family:<br />
<a href="https://youtu.be/JZPXzJ5tp9w">George Wilson − The Extended Functor Family</a></p></li>
<li><p>Handy one-liner bash, the command which joins the images. This is from <a href="https://www.imagemagick.org/script/index.php">ImageMagick</a> software.</p>
<div class="sourceCode"><pre class="sourceCode sh"><code class="sourceCode bash"><span class="ex">convert</span> input1.png input2.png input3.png -append output.png</code></pre></div>
<p><code>-append</code> join the images vertically<br />
<code>+append</code> join the images horizontally</p></li>
<li>Some music which I listen during the week:
<ol type="1">
<li><a href="https://en.wikipedia.org/wiki/Acoustic_Alchemy">Acoustic Alchemy</a>: all discography.</li>
<li><a href="https://en.wikipedia.org/wiki/Tangerine_Dream">Tangerine Dream</a>: Le Parc, Melrose, Rockoon, Tiger.</li>
<li>The Rolling Stones: <a href="https://en.wikipedia.org/wiki/Beggars_Banquet">Beggars Banquet</a>.</li>
</ol></li>
</ul>
<h2 id="next-week-goals">Next week goals</h2>
<ul>
<li>third chapter of “How to prove it” book is done</li>
<li>40 km of walking activity</li>
<li>take an English lesson</li>
</ul>

<div id="comment-nav">
  <div>
    <a id="gh-comments-button" class="btn" href="https://github.com/drets/drets.github.io/issues/2.0">Comment on GitHub</a>

    
  </div>
  <div>
    
    
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Mon, 01 May 2017 11:00:00 UT</pubDate>
    <guid>https://drets.life/posts/weekly-review-2017-17.html</guid>
    <dc:creator>Dmytro Rets</dc:creator>
</item>
<item>
    <title>Weekly Review 16</title>
    <link>https://drets.life/posts/weekly-review-2017-16.html</link>
    <description><![CDATA[<p><span style="font-variant: small-caps;">1min 32sec read</span></p>
<p>This is my 4th weekly review of the 16th week 2017 year. Life is good!</p>
<div>

</div>
<!--more-->
<h2 id="this-week">This week</h2>
<ul>
<li><p><em>“How to prove it”</em>:<br />
I am working on the exercises for the 4th section of “Proofs” chapter (chapter 3). The chapter is quite big (it has 7 sections) and I think it will take one more week to finish the chapter. “Proofs” chapter obviously teaches how to make proofs of statements using specific techniques. In the 1st section, the author describes basic proof strategies, like how to proof a conclusion of the form <span class="math inline"><em>P</em> → <em>Q</em></span>. In the 2nd section, he adds the proofs involving negations and conditionals. The 3d section introduces proofs involving quantifiers and 4th section adds proofs involving conjunctions and biconditionals. The chapter has quite a lot of exercises which can be solved using “Proof Designer” application and I like it, since using the Proof designer, you don’t need to type a lot of characters and the program checks your correctness. Thus, I can be sure that I did a proof correctly which is quite important for my confidence. That’s all about the book, I’ll publish the solutions which definitely should have some errors when I finish the chapter 3.</p></li>
<li><p><em>Emacs</em>:<br />
I started to use <em>again</em> the <a href="https://github.com/anler/centered-window-mode">centered-window-mode</a> and I quite like it: now my eyes instead of looking mostly on the corner of display look at center.</p></li>
<li><p><em>Nice browser extension</em>:<br />
A browser extension that turns package/module names on Github into links (Chrome only): <a href="https://github.com/fiatjaf/module-linker">module-linker</a></p></li>
<li><p><em>Future in Rust</em>:<br />
I have read this post: <a href="http://aturon.github.io/blog/2016/08/11/futures/" class="uri">http://aturon.github.io/blog/2016/08/11/futures/</a> and looked at the implementation of “Future” feature, quite interesting stuff: the purpose is similar to javascript promises, but an implementation is completely different. The future code compiles down to an actual state machine which progresses via callbacks (with no overhead).</p></li>
<li><p><em>Lenses in practice</em>:<br />
Enjoyed watching this video: <a href="https://youtu.be/QZy4Yml3LTY">John Wiegley: Putting Lenses to Work</a>. Especially last part of the video with advanced examples.</p></li>
<li><p><em>Music</em>:<br />
Suddenly I started to listen new to me genres of music: Downtempo, French House, lounge music, Future Jazz.<br />
These albums play in my player:</p>
<ul>
<li><p><a href="https://en.wikipedia.org/wiki/Stéphane_Pompougnac">Stephane Pompougnac</a> − Hotel Costes</p></li>
<li><p><a href="https://de.wikipedia.org/wiki/John_Beltran">John Beltran</a> − Americano</p></li>
<li><p><a href="https://fr.wikipedia.org/wiki/Minus_8">Minus 8</a> − Minuit</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Parov_Stelar">Parov Stelar</a> − The Princess</p></li>
</ul></li>
</ul>
<h2 id="next-week">Next week</h2>
<ul>
<li>I <em>hope</em> to finish the chapter 3.</li>
<li>Need to book the English lesson on this week and prepare for the lesson by making the essay.</li>
</ul>

<div id="comment-nav">
  <div>
    <a id="gh-comments-button" class="btn" href="https://github.com/drets/drets.github.io/issues/2.0">Comment on GitHub</a>

    
  </div>
  <div>
    
    
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Mon, 24 Apr 2017 11:00:00 UT</pubDate>
    <guid>https://drets.life/posts/weekly-review-2017-16.html</guid>
    <dc:creator>Dmytro Rets</dc:creator>
</item>
<item>
    <title>Weekly Review 15</title>
    <link>https://drets.life/posts/weekly-review-2017-15.html</link>
    <description><![CDATA[<p><span style="font-variant: small-caps;">1min 2sec read</span></p>
<p>It’s my weekly review for the 15th week of the 2017 year. Since I work through the “How to Prove It: A Structured Approach” book. This week is all about it.</p>
<div>

</div>
<!--more-->
<h2 id="this-week">This week</h2>
<p>I finished to work through the “Quantificational Logic” chapter (chapter 2) and did the all exercises here: <a href="https://github.com/drets/how-to-prove-it/blob/master/htp_2.pdf">2.pdf</a>. It doesn’t mean that I did the all exercises correctly, so feel free to create an issue and submit a pull request on GitHub for improving the solutions.</p>
<p>One year ago I was writing the tests using <a href="https://hackage.haskell.org/package/smallcheck-1.1.1/docs/Test-SmallCheck.html">SmallCheck</a> and had a hard time understanding quantifiers. Finally, after finishing the chapter 2 I understood what does it mean universal (<span class="math inline">∀</span>) and existential (<span class="math inline">∃</span>) quantifiers and how to use them. Now, looking at the SmallCheck documentation doesn’t scare me at all and even makes perfect sense!</p>
<p>Moreover, chapter 2 describes such things as the family of sets <span class="math inline">ℱ</span>, the union of the family of sets <span class="math inline">∪ℱ</span>, the intersection of the family of sets <span class="math inline">∩ℱ</span>, the power set <span class="math inline">𝒫(<em>A</em>)</span> and much more.</p>
<h2 id="next-week">Next week</h2>
<ul>
<li><p>I already started to work through “Proofs” (chapter 3) and even finished first 2 sections of the chapter. However, the chapter has 7 sections (the longest chapter so far and I think it’s the core chapter of the book). So, I have ambitious plans to finish the chapter 3. I only 104 exercises away! Some of these exercises can be solved using the <a href="https://app.cs.amherst.edu/~djvelleman/pd/pd.html">Proof designer</a>. It’s the small program which author of the book suggests for proving things.</p></li>
<li><p>I need to do the exercise for my English classes and write the small essay about world overpopulation.</p></li>
</ul>

<div id="comment-nav">
  <div>
    
    
  </div>
  <div>
    
    
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Mon, 17 Apr 2017 11:00:00 UT</pubDate>
    <guid>https://drets.life/posts/weekly-review-2017-15.html</guid>
    <dc:creator>Dmytro Rets</dc:creator>
</item>
<item>
    <title>Weekly Review 14</title>
    <link>https://drets.life/posts/weekly-review-2017-14.html</link>
    <description><![CDATA[<p><span style="font-variant: small-caps;">32sec read</span></p>
<blockquote>
<p>The only way to learn mathematics is to do mathematics.</p>
<p>— <cite>Paul Halmos</cite></p>
</blockquote>
<div>

</div>
<!--more-->
<h2 id="this-week">This week</h2>
<p>I decided to spend a month or so on improving my math skills. I understand that “How to Prove It: A Structured Approach” book by Daniel J. Velleman is not a silver bullet and may give me only the basics. Hopefully, it’ll help me to understand deeper the <a href="https://youtu.be/KaBz45nZEZw?list=PLbgaMIhjbmElia1eCEZNvsVscFef9m0dm">Category Theory II</a> videos and prepare for <a href="https://www.cis.upenn.edu/~bcpierce/sf/current/">Software Foundations</a> course which I have a plan to do at some point.</p>
<p>I’d like to do exercises from the book as many as possible, so here are my solutions for all exercises from the first chapter: <a href="https://github.com/drets/how-to-prove-it/blob/master/htp_1.pdf">1.pdf</a>.</p>
<h2 id="next-week">Next week</h2>
<ul>
<li><p>I plan to do exercises from the second chapter of the book.</p></li>
<li><p>If a friend of mine prepares the backend for “Highlighting” feature in Heutagogy project I may switch to the implementation of “Highlighting” on mobile.</p></li>
</ul>

<div id="comment-nav">
  <div>
    
    
  </div>
  <div>
    
    
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Mon, 10 Apr 2017 11:00:00 UT</pubDate>
    <guid>https://drets.life/posts/weekly-review-2017-14.html</guid>
    <dc:creator>Dmytro Rets</dc:creator>
</item>
<item>
    <title>Weekly Review 13</title>
    <link>https://drets.life/posts/weekly-review-2017-13.html</link>
    <description><![CDATA[<p><span style="font-variant: small-caps;">1min 33sec read</span></p>
<p>I am starting doing my weekly reviews. I am going to share the things which kept my attention, my opinion on these things and what I am going to do next. <del>Since these reviews are mostly for me I disabled “Comment on GitHub” button</del> <em>(friend of mine suggested to enable the comments)</em>. If you have questions or suggestions feel free to send me an email. <del>You may find my email on GitHub and link to my GitHub account is on “About” page</del> <em>(I added the email address to “About” page)</em>. Let’s start.</p>
<div>

</div>
<!--more-->
<h2 id="this-week">This week</h2>
<ul>
<li><p><strong>Microkernel</strong><br />
I went through series of articles on building simple OS kernel. I really suggest these articles to everyone who wants to get familiar with “bare metal” programming.<br />
Starting point: <a href="https://singpolyma.net/2012/01/writing-a-simple-os-kernel-part-1/">Writing a Simple OS Kernel — Part 1</a></p></li>
<li><p><strong>Annotations</strong><br />
I started to implement annotation for <a href="https://github.com/heutagogy">Heutagogy</a> project, so a user can extract important pieces of information from the text and save it for reviewing later. One important thing to mention: I did few hours of <em>remote pair programming</em>, it was nice.</p></li>
<li><p><strong>Category Theory</strong><br />
I started to watch videos from <a href="https://youtu.be/3XTQSx1A3x8?list=PLbgaMIhjbmElia1eCEZNvsVscFef9m0dm">Category Theory II</a>. It’s quite interesting but I decided to postpone watching these videos for a few month.</p></li>
<li><p><strong>Plotting</strong><br />
<a href="http://www.gnuplot.info">Gnuplot</a> is a tool for plotting simple charts. I started to use it for plotting “Review pomodoros” chart.</p></li>
<li><p><strong>Lens</strong><br />
I worked through “Lens: a Swiss Army knife for data structures” article from not published <em>yet</em> <a href="http://intermediatehaskell.com">Haskell</a> book. Here’s the article on the same topic from the same author: <a href="https://artyom.me/lens-over-tea-1">Lens over tea</a>.</p></li>
<li><p><strong>How to prove it</strong><br />
I decided to work on <a href="https://www.amazon.com/How-Prove-Structured-Approach-2nd/dp/0521675995">“How to prove it”</a> book. It should open the door for type theory and category theory books. Since I want to do exercises from the book I started to use <a href="https://en.wikipedia.org/wiki/TeX">TeX</a> in emacs. TeX is cool and not scary at all, try it if you need to write math formulas.</p></li>
<li><p><strong>Secure shell</strong><br />
I connected to the laptop via phone and disabled/enabled keyboard/mouse just for fun. I used <a href="https://play.google.com/store/apps/details?id=com.termux&amp;hl=en">Termux</a> on mobile.</p></li>
<li><p><strong>Sticky keys</strong><br />
I found a nice <a href="http://faculty.missouri.edu/~stephen/software/#xkbset">xkbset</a> tool which helped me to enable mouse keys (pressing key emulates mouse click) permanently and sticky keys. However, I am still evaluating sticky feature since sometimes it’s inconvenient to have all sticky keys, I’d like to restrict it only to the Shift keys, but it looks like it’s not possible with this tool.</p></li>
</ul>
<h2 id="next-week">Next week</h2>
<ul>
<li>finish implementing annotations for android app</li>
<li>start implementing annotations for chrome extension</li>
<li>continue working on “How to prove it” book</li>
</ul>

<div id="comment-nav">
  <div>
    
    
  </div>
  <div>
    
    
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Mon, 03 Apr 2017 11:00:00 UT</pubDate>
    <guid>https://drets.life/posts/weekly-review-2017-13.html</guid>
    <dc:creator>Dmytro Rets</dc:creator>
</item>
<item>
    <title>Haskell eXchange 2016</title>
    <link>https://drets.life/posts/haskell-exchange-2016.html</link>
    <description><![CDATA[<p><span style="font-variant: small-caps;">3min 57sec read</span></p>
<p>A few weeks ago I was able to attend the “Haskell eXchange” conference in London. In this post, I’d like to introduce readers to functional programming and briefly highlight the advantages and techniques of functional programming which I learned from a talk<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> by <a href="https://donsbot.wordpress.com/about">Don Stewart</a>, the author of the book <a href="http://book.realworldhaskell.org/">“Real World Haskell”</a>. Then I’ll share some thoughts about how companies might start to integrate functional programming into their tech stack.</p>
<div>

</div>
<!--more-->
<h2 id="introduction-to-functional-programming">Introduction to functional programming</h2>
<p><em>What is functional programming?</em><br />
A style of building programs using mathematical functions.</p>
<p><em>What is mathematical function?</em><br />
A relation exists between a set of inputs and a set of outputs; each with the property that each input is related to <em>exactly one</em> output.</p>
<p>Let me give an example:</p>
<div class="sourceCode"><pre class="sourceCode js"><code class="sourceCode javascript"><span class="kw">var</span> x <span class="op">=</span> <span class="dv">1</span><span class="op">;</span>

<span class="kw">function</span> <span class="at">impure</span>(y) <span class="op">{</span>
  x <span class="op">=</span> x <span class="op">+</span> y<span class="op">;</span>
  <span class="cf">return</span> x<span class="op">;</span>
<span class="op">}</span>
  
<span class="kw">function</span> <span class="at">pure</span>(x) <span class="op">{</span>
  <span class="cf">return</span> x <span class="op">+</span> <span class="dv">1</span><span class="op">;</span>
<span class="op">}</span>

<span class="va">console</span>.<span class="at">log</span>(<span class="at">impure</span>(<span class="dv">3</span>))<span class="op">;</span> <span class="co">// 4</span>
<span class="va">console</span>.<span class="at">log</span>(<span class="at">impure</span>(<span class="dv">3</span>))<span class="op">;</span> <span class="co">// 7</span>

<span class="va">console</span>.<span class="at">log</span>(<span class="at">pure</span>(<span class="dv">3</span>))<span class="op">;</span> <span class="co">// 4</span>
<span class="va">console</span>.<span class="at">log</span>(<span class="at">pure</span>(<span class="dv">3</span>))<span class="op">;</span> <span class="co">// 4</span></code></pre></div>
<p>Impure functions return different result for the same input (number <code>3</code>). In other words − impure functions have side-effects.</p>
<p><em>Why is this bad?</em><br />
Because you lose modularity and it is harder to think about functions with side-effects.</p>
<p>On the other hand, it’s really easy to compose pure functions:</p>
<div class="sourceCode"><pre class="sourceCode js"><code class="sourceCode javascript"><span class="kw">function</span> <span class="at">compose</span>(f<span class="op">,</span>g) <span class="op">{</span>
   <span class="cf">return</span> <span class="kw">function</span>(x) <span class="op">{</span>
     <span class="cf">return</span> <span class="at">f</span>(<span class="at">g</span>(x))<span class="op">;</span>
   <span class="op">}</span>
<span class="op">}</span>

<span class="kw">function</span> <span class="at">plusOne</span>(x) <span class="op">{</span>
  <span class="cf">return</span> x <span class="op">+</span> <span class="dv">1</span><span class="op">;</span>
<span class="op">}</span>

<span class="kw">var</span> plusTwo <span class="op">=</span> <span class="at">compose</span>(plusOne<span class="op">,</span> plusOne)<span class="op">;</span>
<span class="kw">var</span> plusThree <span class="op">=</span> <span class="at">compose</span>(plusTwo<span class="op">,</span> plusOne)<span class="op">;</span>

<span class="va">console</span>.<span class="at">log</span>(<span class="at">plusOne</span>(<span class="dv">1</span>))<span class="op">;</span> <span class="co">// 2</span>
<span class="va">console</span>.<span class="at">log</span>(<span class="at">plusTwo</span>(<span class="dv">1</span>))<span class="op">;</span> <span class="co">// 3</span>
<span class="va">console</span>.<span class="at">log</span>(<span class="at">plusThree</span>(<span class="dv">1</span>))<span class="op">;</span> <span class="co">// 4</span></code></pre></div>
<p>It’s like <em>lego</em> games; by having a set of pure functions you can easily build your own galaxy.</p>
<p><em>Why aren’t pure functions used all the time?</em><br />
Pure functions are awesome but the real life programs have a bunch of side-effects. Getting a response from the server, reading from the file, printing to the screen − all these operations have side-effects. You can’t build a truly <em>useful</em> program just on top of pure functions − you need functions with side-effects as well.</p>
<h2 id="don-stewarts-talk">Don Stewart’s talk</h2>
<p>Haskell has a smart way to distinguish between pure and impure functions. It is common in the Haskell community to write function types for the functions.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">makeApple ::</span> <span class="dt">Seed</span> <span class="ot">→</span> <span class="dt">IO</span> <span class="dt">Apple</span>
<span class="ot">makeJuice ::</span> <span class="dt">Apple</span> <span class="ot">→</span> <span class="dt">Juice</span></code></pre></div>
<p>If you see <code>IO</code> (it’s a Monad) somewhere in type signature, it means the function is impure.<br />
As well, Haskell has strong static typing. Before running a program, compiler should correctly type check a program (and compiler can catch a dozens of errors!).<br />
Now, let me highlight some parts from Don Stewart’s talk. Don Stewart leads the Haskell teams in the financial sector. In his talk, he shared how to control complexity of applications with more than <strong>3</strong> million lines of code.</p>
<p>Here are a few tips from him:</p>
<p>• Types help to control complexity.</p>
<p>• Compare 2 pricing functions:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">f ::</span> <span class="dt">Double</span> <span class="ot">→</span> <span class="dt">Double</span> <span class="ot">→</span> <span class="dt">String</span> <span class="ot">→</span> <span class="dt">Double</span>
<span class="ot">g ::</span> <span class="dt">Rate</span> <span class="dt">Libor</span> <span class="ot">→</span> <span class="dt">Spot</span> <span class="dt">SGD</span> <span class="ot">→</span> <span class="dt">Date</span> <span class="ot">→</span> <span class="dt">Rate</span> <span class="dt">SIBOR</span></code></pre></div>
<p><code>g</code> has more expressive types. In other words, you can say more about the function by looking in function type assuming you know financial domain.</p>
<p>• Remove unclear types.</p>
<p>• No side effects. Instead, try to write pure functions as many as possible.</p>
<p>• Make things simpler by controlling <code>IO</code> and new types.</p>
<p>• Types are for keeping code maintainable and self-documented.</p>
<p>• Use “new types” and “data” to distinguish unique entities in the system.</p>
<p>• Using <a href="https://wiki.haskell.org/Phantom_type">Phantom types</a>, you can tag the things. Make it impossible to mix up or combine values in nonsense ways.</p>
<p>• As opposed to <code>Stings</code> and <code>Double</code> types have too many valid values for most use cases, <code>Bool</code> often has too little information.<br />
Instead of <code>authenticate :: String -&gt; String -&gt; Bool</code><br />
write <code>authenticate :: Privileges p =&gt; User -&gt; Password -&gt; IO (AuthUser p)</code></p>
<p>• Lift errors into types (using <code>Maybe</code> and <code>Either</code>) for  making functions modular.</p>
<p>• Move <a href="https://wiki.haskell.org/Partial_functions">partial functions</a> to the edges and write total functions as a core of program.</p>
<p>• Types − in order to minimize complexity; it helps to deliver faster. Reuse is extremely cheap.</p>
<p>Of course, for the reader unfamiliar with Haskell, these tips don’t tell much, but let me repeat once more. Basically, the main idea is that you need to use meaningful types as much as possible. In such a way you give a compiler more information about a program and consequently, the compiler helps to catch a lot of errors and hopefully optimize the code. Other simple ideas are to use total functions, move side-effects to the edges of a program. That’s it!</p>
<h2 id="haskell-to-industry">Haskell to industry</h2>
<p>Even if Haskell has a great community with a lot of academic folks behind it, the community is really small compare to the Python or Javascript, or Php communities. It tends to lack some useful libraries, so if you switch to Haskell you should expect to have to contribute a lot to existing libraries or write more libraries for your needs. However, I believe it should be changed soon since a lot of people have realized that the OOP paradigm is not an answer to robust software development, especially in the time when parallel and concurrent programming plays more important role. I understand that re-writing back-end systems on Haskell, if you were building the systems during last 10 years using Javasript, Php, Java may not be an option. As a first step towards Haskell I suggest a “Haskell-like” language − <a href="http://elm-lang.org">Elm</a>. Why Elm? Elm looks a bit simpler to start and it’s web-browser-based, and so it looks like a good alternative to almighty Javascipt. One more advantage of Elm is that you can introduce it gradually into an existing JS project<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>. Once you are happy with your front-end using Elm you may think to move some of your back-end services to Haskell. After Elm it should be much easier to start.</p>
<p>Happy hacking!</p>
<p>At the end of this post I’d like to share a photo with one of the core Haskell developers, <a href="https://en.wikipedia.org/wiki/Simon_Peyton_Jones">Simon Peyton Jones</a>.</p>
<figure>
<img src="../images/posts/haskell-exchange-2016/simon_and_me.png" />
</figure>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>To see full talk: <em><a href="https://skillsmatter.com/skillscasts/9098-haskell-in-the-large-the-day-to-day-practice-of-using-haskell-to-write-large-systems">“Haskell in the Large - The day to day practice of using Haskell to write large systems”</a></em>, you can sign up to “skills matter” site (it’s free!).<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://elm-lang.org/blog/how-to-use-elm-at-work">How to use Elm at work</a><a href="#fnref2">↩</a></p></li>
</ol>
</section>

<div id="comment-nav">
  <div>
    <a id="gh-comments-button" class="btn" href="https://github.com/drets/drets.github.io/issues/1.0">Comment on GitHub</a>

    
  </div>
  <div>
    
    
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Sat, 22 Oct 2016 03:00:00 UT</pubDate>
    <guid>https://drets.life/posts/haskell-exchange-2016.html</guid>
    <dc:creator>Dmytro Rets</dc:creator>
</item>

    </channel>
</rss>
